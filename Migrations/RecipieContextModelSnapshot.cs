// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipieLandAPI.Concrete;

#nullable disable

namespace RecipieLandAPI.Migrations
{
    [DbContext(typeof(RecipieContext))]
    partial class RecipieContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RecipieLandAPI.Entity.DefaultUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.NutritionRecipie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NutritionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NutritionId");

                    b.HasIndex("RecipieId");

                    b.ToTable("RecipieNutritions");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.Nutritions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NutritionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Nutritions");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.Recipie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Calories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Carb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparationTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protein")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serve")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("Recipies");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.RecipieCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RecipieCategories");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.RecipieSteps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecipieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecipieId");

                    b.ToTable("RecipieSteps");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.UserFollowing", b =>
                {
                    b.Property<Guid>("OwnUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnUserId", "FollowerId");

                    b.ToTable("UserFollowings");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.UserLikedCategory", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "CategoryID");

                    b.ToTable("UserLikedCategories");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.UserLikedRecipies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLikedRecipies");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.UserRecipie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserRecipieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipieId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRecipieId");

                    b.ToTable("UserRecipies");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.NutritionRecipie", b =>
                {
                    b.HasOne("RecipieLandAPI.Entity.Nutritions", "Nutrition")
                        .WithMany()
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipieLandAPI.Entity.Recipie", "Recipie")
                        .WithMany()
                        .HasForeignKey("RecipieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrition");

                    b.Navigation("Recipie");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.Recipie", b =>
                {
                    b.HasOne("RecipieLandAPI.Entity.RecipieCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.RecipieSteps", b =>
                {
                    b.HasOne("RecipieLandAPI.Entity.Recipie", null)
                        .WithMany("RecipieSteps")
                        .HasForeignKey("RecipieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.UserFollowing", b =>
                {
                    b.HasOne("RecipieLandAPI.Entity.DefaultUser", null)
                        .WithMany("Followers")
                        .HasForeignKey("OwnUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.UserLikedCategory", b =>
                {
                    b.HasOne("RecipieLandAPI.Entity.DefaultUser", null)
                        .WithMany("LikeCategoryUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.UserLikedRecipies", b =>
                {
                    b.HasOne("RecipieLandAPI.Entity.Recipie", null)
                        .WithMany("UserLikes")
                        .HasForeignKey("RecipieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipieLandAPI.Entity.DefaultUser", null)
                        .WithMany("LikedRecipies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.UserRecipie", b =>
                {
                    b.HasOne("RecipieLandAPI.Entity.Recipie", "Recipie")
                        .WithMany()
                        .HasForeignKey("RecipieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipieLandAPI.Entity.DefaultUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipieLandAPI.Entity.DefaultUser", null)
                        .WithMany("OwnerRecipies")
                        .HasForeignKey("UserRecipieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.DefaultUser", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("LikeCategoryUsers");

                    b.Navigation("LikedRecipies");

                    b.Navigation("OwnerRecipies");
                });

            modelBuilder.Entity("RecipieLandAPI.Entity.Recipie", b =>
                {
                    b.Navigation("RecipieSteps");

                    b.Navigation("UserLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
